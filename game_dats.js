/*
**
** The JavaScript code is generated by atscc2js
** The starting compilation time is: 2015-4-24: 18h:34m
**
*/

var statmp0

var statmp1

var statmp2

var statmp3

var statmp4

var statmp5

var statmp6

var statmp7

var statmp8

var statmp9

var statmp10

function
init_0()
{
//
// knd = 0
  var tmp14
  var tmp17
//
  // __patsflab_init_0
  init_stage();
  init_resources();
  tmp14 = init_player(304, 576);
  stage_add(tmp14);
  tmp17 = [tmp14];
  ats2jspre_ref_set_elt(statmp0, tmp17);
  init_enemies(statmp3, 8, 4);
  return/*_void*/;
} // end-of-function


function
_057_home_057_grad3_057_knikolla_057_Documents_057_PPL_057_TypeInvaders_057_game_056_sats__player_get()
{
//
// knd = 0
  var tmpret18
//
  // __patsflab_player_get
  tmpret18 = ats2jspre_ref_get_elt(statmp0);
  return tmpret18;
} // end-of-function


function
enemies_get()
{
//
// knd = 0
  var tmpret19
//
  // __patsflab_enemies_get
  tmpret19 = ats2jspre_ref_get_elt(statmp4);
  return tmpret19;
} // end-of-function


function
player_bullets_get()
{
//
// knd = 0
  var tmpret20
//
  // __patsflab_player_bullets_get
  tmpret20 = ats2jspre_ref_get_elt(statmp7);
  return tmpret20;
} // end-of-function


function
enemy_bullets_get()
{
//
// knd = 0
  var tmpret21
//
  // __patsflab_enemy_bullets_get
  tmpret21 = ats2jspre_ref_get_elt(statmp9);
  return tmpret21;
} // end-of-function


function
enemies_direction()
{
//
// knd = 0
  var tmpret22
//
  // __patsflab_enemies_direction
  tmpret22 = ats2jspre_ref_get_elt(statmp10);
  return tmpret22;
} // end-of-function


function
enemies_turn()
{
//
// knd = 0
  var tmp24
  var tmp25
  var tmp26
//
  // __patsflab_enemies_turn
  tmp25 = ats2jspre_neg_int0(1);
  tmp26 = ats2jspre_ref_get_elt(statmp10);
  tmp24 = ats2jspre_mul_int0_int0(tmp25, tmp26);
  ats2jspre_ref_set_elt(statmp10, tmp24);
  return/*_void*/;
} // end-of-function


function
player_remove()
{
//
// knd = 0
  var tmp28
//
  // __patsflab_player_remove
  tmp28 = null;
  ats2jspre_ref_set_elt(statmp0, tmp28);
  return/*_void*/;
} // end-of-function


function
player_cooldown(arg0)
{
//
// knd = 0
  var tmp30
  var tmp31
  var tmp32
  var tmp33
//
  // __patsflab_player_cooldown
  tmp31 = ats2jspre_ref_get_elt(statmp2);
  tmp30 = ats2jspre_gt_int0_int0(tmp31, 0);
  if(tmp30) {
    tmp33 = ats2jspre_ref_get_elt(statmp2);
    tmp32 = ats2jspre_sub_int0_int0(tmp33, arg0);
    ats2jspre_ref_set_elt(statmp2, tmp32);
  } else {
    // ATSINSmove_void
  } // endif
  return/*_void*/;
} // end-of-function


function
player_can_fire()
{
//
// knd = 0
  var tmpret34
  var tmp35
  var tmp36
//
  // __patsflab_player_can_fire
  tmp36 = ats2jspre_ref_get_elt(statmp2);
  tmp35 = ats2jspre_lte_int0_int0(tmp36, 0);
  if(tmp35) {
    ats2jspre_ref_set_elt(statmp2, 1000);
    tmpret34 = [1];
  } else {
    tmpret34 = null;
  } // endif
  return tmpret34;
} // end-of-function


function
enemy_can_fire(arg0)
{
//
// knd = 0
  var tmpret38
  var tmp40
  var tmp41
  var tmp42
  var tmp43
  var tmp44
  var tmp45
  var tmp47
  var tmp48
  var tmp49
  var tmp50
//
  // __patsflab_enemy_can_fire
  tmp41 = ats2jspre_ref_get_elt(statmp5);
  tmp40 = ats2jspre_sub_int0_int0(tmp41, arg0);
  ats2jspre_ref_set_elt(statmp5, tmp40);
  tmp43 = ats2jspre_ref_get_elt(statmp5);
  tmp42 = ats2jspre_lt_int0_int0(tmp43, 0);
  if(tmp42) {
    tmp44 = enemies_get();
    tmp45 = store_size(tmp44);
    tmp48 = my_rand(500);
    tmp50 = ats2jspre_div_int1_int1(tmp45, 4);
    tmp49 = ats2jspre_add_int1_int1(tmp50, 1);
    tmp47 = ats2jspre_mul_int0_int0(tmp48, tmp49);
    ats2jspre_ref_set_elt(statmp5, tmp47);
    tmpret38 = [1];
  } else {
    tmpret38 = null;
  } // endif
  return tmpret38;
} // end-of-function


function
init_enemies(arg0, arg1, arg2)
{
//
// knd = 0
//
  // __patsflab_init_enemies
  go_12(arg0, arg1, arg2, 0, 0);
  return/*_void*/;
} // end-of-function


function
go_12(arg0, arg1, arg2, arg3, arg4)
{
//
// knd = 1
  var apy0
  var apy1
  var apy2
  var apy3
  var apy4
  var tmp54
  var tmp55
  var tmp56
  var tmp57
  var tmp58
  var tmp61
  var tmp62
  var tmp63
  var tmp64
  var tmp65
  var tmp66
  var funlab_js
  var tmplab, tmplab_js
//
  while(true) {
    funlab_js = 0;
    // __patsflab_go_12
    tmp55 = ats2jspre_add_int1_int1(arg3, 1);
    tmp54 = ats2jspre_mul_int1_int1(64, tmp55);
    tmp57 = ats2jspre_add_int1_int1(arg4, 1);
    tmp56 = ats2jspre_mul_int1_int1(64, tmp57);
    tmp58 = enemy_create(tmp54, tmp56);
    stage_add(tmp58);
    store_add(arg0, tmp58);
    tmp62 = ats2jspre_add_int1_int1(arg3, 1);
    tmp61 = ats2jspre_lt_int1_int1(tmp62, arg1);
    if(tmp61) {
      tmp63 = ats2jspre_add_int1_int1(arg3, 1);
      // ATStailcalseq_beg
      apy0 = arg0;
      apy1 = arg1;
      apy2 = arg2;
      apy3 = tmp63;
      apy4 = arg4;
      arg0 = apy0;
      arg1 = apy1;
      arg2 = apy2;
      arg3 = apy3;
      arg4 = apy4;
      funlab_js = 1; // __patsflab_go_12
      // ATStailcalseq_end
    } else {
      tmp65 = ats2jspre_add_int1_int1(arg4, 1);
      tmp64 = ats2jspre_lt_int1_int1(tmp65, arg2);
      if(tmp64) {
        tmp66 = ats2jspre_add_int1_int1(arg4, 1);
        // ATStailcalseq_beg
        apy0 = arg0;
        apy1 = arg1;
        apy2 = arg2;
        apy3 = 0;
        apy4 = tmp66;
        arg0 = apy0;
        arg1 = apy1;
        arg2 = apy2;
        arg3 = apy3;
        arg4 = apy4;
        funlab_js = 1; // __patsflab_go_12
        // ATStailcalseq_end
      } else {
        // ATSINSmove_void
      } // endif
    } // endif
    if (funlab_js > 0) continue; else return/*_void*/;
  } // endwhile-fun
} // end-of-function


function
player_death(arg0)
{
//
// knd = 0
//
  // __patsflab_player_death
  player_remove();
  stage_remove(arg0);
  gameover_alert();
  return/*_void*/;
} // end-of-function


function
game_tick(arg0)
{
//
// knd = 0
  var tmp71
  var tmp72
//
  // __patsflab_game_tick
  tmp71 = _057_home_057_grad3_057_knikolla_057_Documents_057_PPL_057_TypeInvaders_057_game_056_sats__player_get();
  // ATScaseofseq_beg
  tmplab_js = 1;
  while(true) {
    tmplab = tmplab_js; tmplab_js = 0;
    switch(tmplab) {
      // ATSbranchseq_beg
      case 1: // __atstmplab0
      if(ATSCKptriscons(tmp71)) { tmplab_js = 4; break; }
      case 2: // __atstmplab1
      // ATSINSmove_void
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 3: // __atstmplab2
      if(ATSCKptrisnull(tmp71)) ATSINScaseof_fail("/home/grad3/knikolla/Documents/PPL/TypeInvaders/game.dats: 2649(line=139, offs=5) -- 2905(line=149, offs=10)");
      case 4: // __atstmplab3
      tmp72 = tmp71[0];
      enemy_update(arg0);
      player_update(tmp72, arg0);
      player_bullets_update(arg0);
      enemy_bullets_update(arg0);
      stage_update();
      break;
      // ATSbranchseq_end
    } // end-of-switch
    if (tmplab_js === 0) break;
  } // endwhile
  // ATScaseofseq_end
  return/*_void*/;
} // end-of-function


function
enemy_update(arg0)
{
//
// knd = 0
  var tmp108
  var tmp109
  var tmp110
  var tmp112
//
  // __patsflab_enemy_update
  tmp108 = enemies_get();
  tmp109 = store_size(tmp108);
  tmp110 = ats2jspre_gt_int1_int1(tmp109, 0);
  if(tmp110) {
    boundaries_16(tmp108, tmp109, 0);
    tmp112 = enemies_direction();
    shoot_18(tmp108, tmp109, arg0);
    move_19(tmp108, tmp109, 0, tmp112);
  } else {
    // ATSINSmove_void
  } // endif
  return/*_void*/;
} // end-of-function


function
boundaries_16(arg0, arg1, arg2)
{
//
// knd = 1
  var apy0
  var apy1
  var apy2
  var tmp84
  var tmp85
  var tmp86
  var tmp87
  var tmp88
  var tmp89
  var tmp90
  var tmp91
  var funlab_js
  var tmplab, tmplab_js
//
  while(true) {
    funlab_js = 0;
    // __patsflab_boundaries_16
    tmp84 = store_get(arg0, arg2);
    tmp85 = gameobject_get_x(tmp84);
    tmp86 = tmp85;
    tmp87 = check_17(tmp86);
    tmp88 = ats2jspre_eq_int0_int0(tmp87, 1);
    if(tmp88) {
      // ATSINSmove_void
    } else {
      tmp90 = ats2jspre_add_int1_int1(arg2, 1);
      tmp89 = ats2jspre_lt_int1_int1(tmp90, arg1);
      if(tmp89) {
        tmp91 = ats2jspre_add_int1_int1(arg2, 1);
        // ATStailcalseq_beg
        apy0 = arg0;
        apy1 = arg1;
        apy2 = tmp91;
        arg0 = apy0;
        arg1 = apy1;
        arg2 = apy2;
        funlab_js = 1; // __patsflab_boundaries_16
        // ATStailcalseq_end
      } else {
        // ATSINSmove_void
      } // endif
    } // endif
    if (funlab_js > 0) continue; else return/*_void*/;
  } // endwhile-fun
} // end-of-function


function
check_17(arg0)
{
//
// knd = 0
  var tmpret79
  var tmp80
  var tmp81
  var tmp82
//
  // __patsflab_check_17
  tmp82 = ats2jspre_sub_int1_int1(640, 16);
  tmp81 = ats2jspre_gte_int0_int0(arg0, tmp82);
  if(tmp81) {
    tmp80 = true;
  } else {
    tmp80 = ats2jspre_lte_int0_int0(arg0, 16);
  } // endif
  if(tmp80) {
    enemies_turn();
    tmpret79 = 1;
  } else {
    tmpret79 = 0;
  } // endif
  return tmpret79;
} // end-of-function


function
shoot_18(arg0, arg1, arg2)
{
//
// knd = 0
  var tmp93
  var tmp95
  var tmp96
  var tmp97
  var tmp98
  var tmp99
//
  // __patsflab_shoot_18
  tmp93 = enemy_can_fire(arg2);
  // ATScaseofseq_beg
  tmplab_js = 1;
  while(true) {
    tmplab = tmplab_js; tmplab_js = 0;
    switch(tmplab) {
      // ATSbranchseq_beg
      case 1: // __atstmplab4
      if(ATSCKptriscons(tmp93)) { tmplab_js = 4; break; }
      case 2: // __atstmplab5
      // ATSINSmove_void
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 3: // __atstmplab6
      if(ATSCKptrisnull(tmp93)) ATSINScaseof_fail("/home/grad3/knikolla/Documents/PPL/TypeInvaders/game.dats: 3558(line=179, offs=9) -- 3858(line=189, offs=20)");
      case 4: // __atstmplab7
      tmp96 = ats2jspre_sub_int0_int0(arg1, 1);
      tmp95 = my_rand(tmp96);
      tmp97 = store_get(arg0, tmp95);
      tmp98 = enemy_create_bullet(tmp97);
      tmp99 = enemy_bullets_get();
      store_add(tmp99, tmp98);
      stage_add(tmp98);
      break;
      // ATSbranchseq_end
    } // end-of-switch
    if (tmplab_js === 0) break;
  } // endwhile
  // ATScaseofseq_end
  return/*_void*/;
} // end-of-function


function
move_19(arg0, arg1, arg2, arg3)
{
//
// knd = 1
  var apy0
  var apy1
  var apy2
  var apy3
  var tmp102
  var tmp104
  var tmp105
  var tmp106
  var tmp107
  var funlab_js
  var tmplab, tmplab_js
//
  while(true) {
    funlab_js = 0;
    // __patsflab_move_19
    tmp102 = store_get(arg0, arg2);
    tmp104 = ats2jspre_mul_int0_int0(4, arg3);
    gameobject_translate(tmp102, 16, tmp104, 0);
    tmp106 = ats2jspre_add_int1_int1(arg2, 1);
    tmp105 = ats2jspre_lt_int1_int1(tmp106, arg1);
    if(tmp105) {
      tmp107 = ats2jspre_add_int1_int1(arg2, 1);
      // ATStailcalseq_beg
      apy0 = arg0;
      apy1 = arg1;
      apy2 = tmp107;
      apy3 = arg3;
      arg0 = apy0;
      arg1 = apy1;
      arg2 = apy2;
      arg3 = apy3;
      funlab_js = 1; // __patsflab_move_19
      // ATStailcalseq_end
    } else {
      // ATSINSmove_void
    } // endif
    if (funlab_js > 0) continue; else return/*_void*/;
  } // endwhile-fun
} // end-of-function


function
player_input(arg0)
{
//
// knd = 0
  var tmp116
  var tmp117
  var tmp118
  var tmp120
  var tmp121
  var tmp122
  var tmp123
//
  // __patsflab_player_input
  tmp117 = check_key(37);
  tmp116 = ats2jspre_eq_int0_int0(tmp117, 1);
  if(tmp116) {
    tmp118 = ats2jspre_neg_int0(20);
    gameobject_translate(arg0, 16, tmp118, 0);
  } else {
    // ATSINSmove_void
  } // endif
  tmp121 = check_key(39);
  tmp120 = ats2jspre_eq_int0_int0(tmp121, 1);
  if(tmp120) {
    gameobject_translate(arg0, 16, 20, 0);
  } else {
    // ATSINSmove_void
  } // endif
  tmp123 = check_key(38);
  tmp122 = ats2jspre_eq_int0_int0(tmp123, 1);
  if(tmp122) {
    player_fire(arg0);
  } else {
    // ATSINSmove_void
  } // endif
  return/*_void*/;
} // end-of-function


function
player_fire(arg0)
{
//
// knd = 0
  var tmp125
  var tmp127
  var tmp128
//
  // __patsflab_player_fire
  tmp125 = player_can_fire();
  // ATScaseofseq_beg
  tmplab_js = 1;
  while(true) {
    tmplab = tmplab_js; tmplab_js = 0;
    switch(tmplab) {
      // ATSbranchseq_beg
      case 1: // __atstmplab8
      if(ATSCKptriscons(tmp125)) { tmplab_js = 4; break; }
      case 2: // __atstmplab9
      // ATSINSmove_void
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 3: // __atstmplab10
      if(ATSCKptrisnull(tmp125)) ATSINScaseof_fail("/home/grad3/knikolla/Documents/PPL/TypeInvaders/game.dats: 4745(line=234, offs=5) -- 4941(line=242, offs=8)");
      case 4: // __atstmplab11
      tmp127 = player_bullets_get();
      tmp128 = player_create_bullet(arg0);
      stage_add(tmp128);
      store_add(tmp127, tmp128);
      break;
      // ATSbranchseq_end
    } // end-of-switch
    if (tmplab_js === 0) break;
  } // endwhile
  // ATScaseofseq_end
  return/*_void*/;
} // end-of-function


function
player_update(arg0, arg1)
{
//
// knd = 0
  var tmp133
  var tmp134
  var tmp135
  var tmp136
//
  // __patsflab_player_update
  player_cooldown(arg1);
  player_input(arg0);
  tmp133 = enemy_bullets_get();
  tmp134 = store_size(tmp133);
  tmp135 = object_store_collision(arg0, 16, tmp133, 2, tmp134);
  tmp136 = ats2jspre_gt_int0_int0(tmp135, 0);
  if(tmp136) {
    player_death(arg0);
  } else {
    // ATSINSmove_void
  } // endif
  return/*_void*/;
} // end-of-function


function
player_bullets_update(arg0)
{
//
// knd = 0
  var tmp156
  var tmp157
  var tmp158
  var tmp159
  var tmp160
//
  // __patsflab_player_bullets_update
  tmp156 = player_bullets_get();
  tmp157 = enemies_get();
  tmp158 = store_size(tmp156);
  tmp159 = ats2jspre_gt_int1_int1(tmp158, 0);
  if(tmp159) {
    tmp160 = ats2jspre_sub_int1_int1(tmp158, 1);
    move_24(tmp156, tmp158, tmp160);
  } else {
    // ATSINSmove_void
  } // endif
  return/*_void*/;
} // end-of-function


function
move_24(arg0, arg1, arg2)
{
//
// knd = 1
  var apy0
  var apy1
  var apy2
  var tmp139
  var tmp141
  var tmp143
  var tmp144
  var tmp145
  var tmp146
  var tmp147
  var tmp148
  var tmp150
  var tmp153
  var tmp154
  var tmp155
  var funlab_js
  var tmplab, tmplab_js
//
  while(true) {
    funlab_js = 0;
    // __patsflab_move_24
    tmp139 = store_get(arg0, arg2);
    tmp141 = ats2jspre_neg_int0(16);
    gameobject_translate(tmp139, 2, 0, tmp141);
    tmp145 = gameobject_get_x(tmp139);
    tmp144 = ats2jspre_add_int0_int0(tmp145, 2);
    tmp143 = ats2jspre_lt_int0_int0(tmp144, 0);
    if(tmp143) {
      store_remove(arg0, arg2);
    } else {
      // ATSINSmove_void
    } // endif
    tmp146 = enemies_get();
    tmp147 = store_size(tmp146);
    tmp148 = object_store_collision(tmp139, 2, tmp146, 16, tmp147);
    tmp150 = ats2jspre_eq_int0_int0(tmp148, 1);
    if(tmp150) {
      store_remove(arg0, arg2);
      stage_remove(tmp139);
      tmp153 = ats2jspre_eq_int1_int1(tmp147, 1);
      if(tmp153) {
        congrats_alert();
      } else {
        // ATSINSmove_void
      } // endif
    } else {
      // ATSINSmove_void
    } // endif
    tmp154 = ats2jspre_gt_int1_int1(arg2, 0);
    if(tmp154) {
      tmp155 = ats2jspre_sub_int1_int1(arg2, 1);
      // ATStailcalseq_beg
      apy0 = arg0;
      apy1 = arg1;
      apy2 = tmp155;
      arg0 = apy0;
      arg1 = apy1;
      arg2 = apy2;
      funlab_js = 1; // __patsflab_move_24
      // ATStailcalseq_end
    } else {
      // ATSINSmove_void
    } // endif
    if (funlab_js > 0) continue; else return/*_void*/;
  } // endwhile-fun
} // end-of-function


function
enemy_bullets_update(arg0)
{
//
// knd = 0
  var tmp171
  var tmp172
  var tmp173
  var tmp174
//
  // __patsflab_enemy_bullets_update
  tmp171 = enemy_bullets_get();
  tmp172 = store_size(tmp171);
  tmp173 = ats2jspre_gt_int1_int1(tmp172, 0);
  if(tmp173) {
    tmp174 = ats2jspre_sub_int1_int1(tmp172, 1);
    move_26(tmp171, tmp172, tmp174);
  } else {
    // ATSINSmove_void
  } // endif
  return/*_void*/;
} // end-of-function


function
move_26(arg0, arg1, arg2)
{
//
// knd = 1
  var apy0
  var apy1
  var apy2
  var tmp163
  var tmp166
  var tmp167
  var tmp168
  var tmp169
  var tmp170
  var funlab_js
  var tmplab, tmplab_js
//
  while(true) {
    funlab_js = 0;
    // __patsflab_move_26
    tmp163 = store_get(arg0, arg2);
    gameobject_translate(tmp163, 2, 0, 16);
    tmp168 = gameobject_get_x(tmp163);
    tmp167 = ats2jspre_sub_int0_int0(tmp168, 2);
    tmp166 = ats2jspre_gt_int0_int0(tmp167, 640);
    if(tmp166) {
      store_remove(arg0, arg2);
    } else {
      // ATSINSmove_void
    } // endif
    tmp169 = ats2jspre_gt_int1_int1(arg2, 0);
    if(tmp169) {
      tmp170 = ats2jspre_sub_int1_int1(arg2, 1);
      // ATStailcalseq_beg
      apy0 = arg0;
      apy1 = arg1;
      apy2 = tmp170;
      arg0 = apy0;
      arg1 = apy1;
      arg2 = apy2;
      funlab_js = 1; // __patsflab_move_26
      // ATStailcalseq_end
    } else {
      // ATSINSmove_void
    } // endif
    if (funlab_js > 0) continue; else return/*_void*/;
  } // endwhile-fun
} // end-of-function


function
object_store_collision(arg0, arg1, arg2, arg3, arg4)
{
//
// knd = 0
  var tmpret175
  var tmp184
  var tmp185
//
  // __patsflab_object_store_collision
  tmp184 = ats2jspre_gt_int1_int1(arg4, 0);
  if(tmp184) {
    tmp185 = ats2jspre_sub_int1_int1(arg4, 1);
    tmpret175 = go_28(arg0, arg1, arg2, arg3, arg4, tmp185);
  } else {
    tmpret175 = 0;
  } // endif
  return tmpret175;
} // end-of-function


function
go_28(arg0, arg1, arg2, arg3, arg4, arg5)
{
//
// knd = 1
  var apy0
  var apy1
  var apy2
  var apy3
  var apy4
  var apy5
  var tmpret176
  var tmp177
  var tmp178
  var tmp179
  var tmp182
  var tmp183
  var funlab_js
  var tmplab, tmplab_js
//
  while(true) {
    funlab_js = 0;
    // __patsflab_go_28
    tmp177 = store_get(arg2, arg5);
    tmp178 = check_collision(arg0, arg1, tmp177, arg3);
    tmp179 = ats2jspre_eq_int0_int0(tmp178, 1);
    if(tmp179) {
      stage_remove(tmp177);
      store_remove(arg2, arg5);
      tmpret176 = 1;
    } else {
      tmp182 = ats2jspre_gt_int1_int1(arg5, 0);
      if(tmp182) {
        tmp183 = ats2jspre_sub_int1_int1(arg5, 1);
        // ATStailcalseq_beg
        apy0 = arg0;
        apy1 = arg1;
        apy2 = arg2;
        apy3 = arg3;
        apy4 = arg4;
        apy5 = tmp183;
        arg0 = apy0;
        arg1 = apy1;
        arg2 = apy2;
        arg3 = apy3;
        arg4 = apy4;
        arg5 = apy5;
        funlab_js = 1; // __patsflab_go_28
        // ATStailcalseq_end
      } else {
        tmpret176 = 0;
      } // endif
    } // endif
    if (funlab_js > 0) continue; else return tmpret176;
  } // endwhile-fun
} // end-of-function


function
check_collision(arg0, arg1, arg2, arg3)
{
//
// knd = 0
  var tmpret186
  var tmp187
  var tmp188
  var tmp189
  var tmp190
  var tmp191
  var tmp192
  var tmp193
  var tmp194
  var tmp195
  var tmp196
  var tmp197
  var tmp198
  var tmp199
  var tmp200
  var tmp201
  var tmp202
  var tmp203
  var tmp204
  var tmp205
  var tmp206
//
  // __patsflab_check_collision
  tmp188 = gameobject_get_x(arg0);
  tmp187 = ats2jspre_sub_int0_int0(tmp188, arg1);
  tmp190 = gameobject_get_x(arg0);
  tmp189 = ats2jspre_add_int0_int0(tmp190, arg1);
  tmp192 = gameobject_get_y(arg0);
  tmp191 = ats2jspre_add_int0_int0(tmp192, arg1);
  tmp194 = gameobject_get_y(arg0);
  tmp193 = ats2jspre_sub_int0_int0(tmp194, arg1);
  tmp196 = gameobject_get_x(arg2);
  tmp195 = ats2jspre_sub_int0_int0(tmp196, arg3);
  tmp198 = gameobject_get_x(arg2);
  tmp197 = ats2jspre_add_int0_int0(tmp198, arg3);
  tmp200 = gameobject_get_y(arg2);
  tmp199 = ats2jspre_add_int0_int0(tmp200, arg3);
  tmp202 = gameobject_get_y(arg2);
  tmp201 = ats2jspre_sub_int0_int0(tmp202, arg3);
  tmp206 = ats2jspre_lt_int0_int0(tmp189, tmp195);
  if(tmp206) {
    tmp205 = true;
  } else {
    tmp205 = ats2jspre_gt_int0_int0(tmp187, tmp197);
  } // endif
  if(tmp205) {
    tmp204 = true;
  } else {
    tmp204 = ats2jspre_lt_int0_int0(tmp191, tmp201);
  } // endif
  if(tmp204) {
    tmp203 = true;
  } else {
    tmp203 = ats2jspre_gt_int0_int0(tmp193, tmp199);
  } // endif
  if(tmp203) {
    tmpret186 = 0;
  } else {
    tmpret186 = 1;
  } // endif
  return tmpret186;
} // end-of-function


function
gameobject_translate(arg0, arg1, arg2, arg3)
{
//
// knd = 0
  var tmp209
  var tmp210
  var tmp211
  var tmp212
  var tmp213
  var tmp214
  var tmp215
  var tmp216
  var tmp217
  var tmp218
  var tmp219
  var tmp220
  var tmp221
  var tmp222
  var tmp223
//
  // __patsflab_gameobject_translate
  tmp209 = ats2jspre_gt_int0_int0(arg2, 0);
  if(tmp209) {
    tmp213 = gameobject_get_x(arg0);
    tmp212 = ats2jspre_add_int0_int0(tmp213, arg2);
    tmp211 = ats2jspre_add_int0_int0(tmp212, arg1);
    tmp210 = ats2jspre_gt_int0_int0(tmp211, 640);
    if(tmp210) {
      tmp214 = ats2jspre_sub_int0_int0(640, arg1);
      gameobject_set_x(arg0, tmp214);
    } else {
      tmp216 = gameobject_get_x(arg0);
      tmp215 = ats2jspre_add_int0_int0(tmp216, arg2);
      gameobject_set_x(arg0, tmp215);
    } // endif
  } else {
    tmp219 = gameobject_get_x(arg0);
    tmp218 = ats2jspre_add_int0_int0(tmp219, arg2);
    tmp217 = ats2jspre_lt_int0_int0(tmp218, arg1);
    if(tmp217) {
      gameobject_set_x(arg0, arg1);
    } else {
      tmp221 = gameobject_get_x(arg0);
      tmp220 = ats2jspre_add_int0_int0(tmp221, arg2);
      gameobject_set_x(arg0, tmp220);
    } // endif
  } // endif
  tmp223 = gameobject_get_y(arg0);
  tmp222 = ats2jspre_add_int0_int0(tmp223, arg3);
  gameobject_set_y(arg0, tmp222);
  return/*_void*/;
} // end-of-function

// dynloadflag_init
var _057_home_057_grad3_057_knikolla_057_Documents_057_PPL_057_TypeInvaders_057_game_056_dats__dynloadflag = 0;

function
_057_home_057_grad3_057_knikolla_057_Documents_057_PPL_057_TypeInvaders_057_game_056_dats__dynload()
{
//
// knd = 0
//
  // ATSdynload()
  // ATSdynloadflag_sta(_057_home_057_grad3_057_knikolla_057_Documents_057_PPL_057_TypeInvaders_057_game_056_dats__dynloadflag(373))
  if(ATSCKiseqz(_057_home_057_grad3_057_knikolla_057_Documents_057_PPL_057_TypeInvaders_057_game_056_dats__dynloadflag)) {
    _057_home_057_grad3_057_knikolla_057_Documents_057_PPL_057_TypeInvaders_057_game_056_dats__dynloadflag = 1 ; // flag is set
    statmp1 = null;
    statmp0 = ats2jspre_ref(statmp1);
    statmp2 = ats2jspre_ref(0);
    statmp3 = store_init();
    statmp4 = ats2jspre_ref(statmp3);
    statmp5 = ats2jspre_ref(2000);
    statmp6 = store_init();
    statmp7 = ats2jspre_ref(statmp6);
    statmp8 = store_init();
    statmp9 = ats2jspre_ref(statmp8);
    statmp10 = ats2jspre_ref(1);
    init_0();
  } // endif
  return/*_void*/;
} // end-of-function


function
my_dynload()
{
//
// knd = 0
//
  _057_home_057_grad3_057_knikolla_057_Documents_057_PPL_057_TypeInvaders_057_game_056_dats__dynload();
  return/*_void*/;
} // end-of-function


/* ATSextcode_beg() */
// COMMENT_line

function
game_start()
{
  var _ = my_dynload()
}
// COMMENT_line

/* ATSextcode_end() */

/* ****** ****** */

/* end-of-compilation-unit */
